package br.org.catolicasc.game;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.Scanner;

public class Game {
    private ServerSocket serverSocket;
    private Socket clientSocket;
    private PrintWriter out;
    private BufferedReader in;
    private int numberToGuess;

    public void startServer(int port) throws IOException {
        serverSocket = new ServerSocket(port);
        System.out.println("Servidor iniciado. Aguardando conexão...");
        String quitMessage = "";

        while (!quitMessage.equals("!quit")) {
            clientSocket = serverSocket.accept();
            System.out.println("Conexão estabelecida com o cliente.");
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

            numberToGuess = generateRandomNumber();
            out.println("Digite um número entre 1 e 10:");

            gameHandler();

            quitMessage = in.readLine();
            System.out.println("Cliente encerrou a conexão.");

        }

        stop();
    }

    public void startClient(String ip, int port) throws IOException {
        clientSocket = new Socket(ip, port);
        out = new PrintWriter(clientSocket.getOutputStream(), true);
        in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

        System.out.println("Conexão estabelecida com o servidor.");
        String quitMessage = "";

        while (!quitMessage.equals("!quit")) {
            String message = in.readLine();
            System.out.println(message);

            if (message.contains("Parabéns")) {
                quitMessage = "!quit";
            }

            Scanner scanner = new Scanner(System.in);
            String guess = scanner.nextLine();
            out.println(guess);

            String response = in.readLine();
            System.out.println(response);

            if (response.contains("Parabéns")) {
                quitMessage = "!quit";
            }

            if ("!quit".equals(guess)) {
                quitMessage = "!quit";
                System.out.println("Conexão encerrada pelo cliente.");
                break;
            }
        }

        stop();
    }

    private void gameHandler() throws IOException {
        boolean correctGuess = false;

        while (!correctGuess) {
            String guess = in.readLine();

            try {
                int number = Integer.parseInt(guess);

                if (number == numberToGuess) {
                    out.println("Você acertou! Parabéns!");
                    correctGuess = true;
                } else if (number < numberToGuess) {
                    out.println("O número é maior. Tente novamente:");
                } else {
                    out.println("O número é menor. Tente novamente:");
                }
            } catch (NumberFormatException e) {
                out.println("Entrada inválida. Digite um número válido:");
            }

            if (!correctGuess) {
                out.println("Digite um número entre 1 e 10:");
            }
        }
    }

    private int generateRandomNumber() {
        Random random = new Random();
        return random.nextInt(10) + 1;
    }

    public void stop() {
        try {
            if (in != null)
                in.close();
            if (out != null)
                out.close();
            if (clientSocket != null)
                clientSocket.close();
            if (serverSocket != null)
                serverSocket.close();
        } catch (IOException ex) {
            System.out.println("Erro ao fechar a conexão.");
        }
    }

    public static void main(String[] args) throws RuntimeException {
        Game greet = new Game();

        if (args.length > 0 && args[0].equals("server")) {
            try {
                greet.startServer(1235);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        } else {
            try {
                greet.startClient("127.0.0.1", 1235);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        }
    }
}

